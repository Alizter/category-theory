* Make Distributive into a structure, which every BiCCC automatically satisfies
* Show that exp_prod, prod_coprod and exp_coprod arise from adjunctions
Some of these involve the diagonal functor.
* Define BiCCC characteristics for Cat and Sets
* Instead of HomFunctor, use the closed structure of Cat
And just apply curry to [C^op, C] ‚ü∂ Sets
* Move all instances not related to isomorphism or equivalence into modules
This will prevent Identity from being used whenever 'fmap' is called and I've
forgotten to provide the right context.
* Should the identity functor be Identity, or just id?
* Move Tuple into Coq/Tuple, etc.
* Monad Transformers
