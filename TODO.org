TODO  -*- mode: org; fill-column: 78 -*-

* Restructuring
** TODO Wedges, Limits, Cones, etc., are structures
** DONE Get rid of the isomorphism directory
** TODO Distinguish functors that adapt other functors
Product is a "fundamental" functor, but Strong is an attribute of functors.
** TODO Move notations into modules
** DONE Breakup Structure/Monoidal.v into the various kinds of structures
** DONE Break Functors into subdirectories
- Functor.Construction.Product
- Functor.Structure.Cartesian, etc., to show exactly what they are functors of
- Functor.Product is then just the simple notion
** DONE Have 'make' error if a file is not in _CoqProject
* Miscellaneous
** TODO Boolean object
Is any for which there is a morphism Bool ~> 1 + 1, and a UMP characterizing
such an object.
** TODO Should the strength properties be provable from naturality?
** TODO Define polynomial functors
Any which are composites from identity, constant, product, coproduction and
maybe exponentials .
** CANCELED Instead of HomFunctor, use the closed structure of Cat
And just apply curry to [C^op, C] ⟶ Sets
** CANCELED Move all instances not related to isomorphism or equivalence into modules
This will prevent Identity from being used whenever 'fmap' is called and I've
forgotten to provide the right context.
** DONE Do not open scopes, but associate them with types and Arguments
** DONE Separate adj_from_unit_conuit into its own class AdjunctionFunctional
** DONE Discrete has no arrows; rename the current one to Concrete
** DONE Make Distributive into a structure, which every BiCCC automatically satisfies
** DONE Create dom(f) and cod(f) functions
** CANCELED Should Cat be moved into Functor.v?
* Coq improvements
** TODO Variables argument specifiers, to avoid @foo _ _ _ _ _ _
#+begin_src coq
Arguments Obj {_}, _.
Arguments id {_ _}, {_} _, _ _.
Arguments Hom {_} _ _, _ _ _.
Arguments compose {_} {_ _ _} _ _, _ {_ _ _} _ _, _ _ _ _ _ _.
Arguments assoc {_ _ _ _ _} _ _ _.
Arguments assoc_sym {_ _ _ _ _} _ _ _.
#+end_src coq
** DONE Separate scopes for objects, categories and morphisms
#+begin_src coq
Notation "f ∘ g" := (compose g f) : morphism_scope.
Notation "a –≻ b" := (Hom a b) : morphism_scope.

Bind Scope category_scope with Category.
Bind Scope morphism_scope with Hom.
Bind Scope object_scope with Obj.

Delimit Scope category_scope with category.
Delimit Scope morphism_scope with morphism.
Delimit Scope object_scope with object.
Delimit Scope functor_scope with functor.
Delimit Scope nattrans_scope with nattrans.
Delimit Scope nattrans_scope with nattrans.
Delimit Scope natiso_scope with natiso.
Delimit Scope isomorphism_scope with isomorphism.
Delimit Scope preorder_scope with preorder.
#+end_src coq
** CANCELED Use a targeted ltac macro for rewriting identities
#+begin_src coq
Ltac simpl_ids :=
  let id_detected B :=
      let J := fresh "H" in
      cut (B = id); [intros J; rewrite J; clear J | trivial]
  in
  repeat(
      match goal with
        | [|- context[(?A ∘ id)%morphism] ] => rewrite id_unit_right
        | [|- context[(id ∘ ?A)%morphism] ] => rewrite id_unit_left
        | [|- (?A ∘ ?B)%morphism = ?A] => id_detected B
        | [|- (?A = ?A ∘ ?B) %morphism] => id_detected B
        | [|- (?B ∘ ?A = ?A)%morphism] => id_detected B
        | [|- (?A = ?B ∘ ?A)%morphism] => id_detected B
      end
    ).
#+end_src coq
** DONE Notation for accessing an isomorphism's inverse
#+begin_src coq
Notation "f '⁻¹'" := (inverse_morphism f) : morphism_scope.
#+end_src coq
** DONE Make monic, epic, etc., into type classes
** DONE Use notations for 1, 0, etc.
#+begin_src coq
Notation "1" := (SingletonCat) : category_scope.

Notation "1" := (terminal term) : object_scope.
#+end_src coq
** CANCELED Polymorphic unit?
- State "CANCELED"   from "TODO"       [2017-05-10 Wed 16:50] \\
  Not needed, since I use setoids.
On the other hand, if we show that Set has the type unit as its terminal
object, we, strangely, get the restriction that the level of the type of
arrows of Set is universe Set but, expectedly, not for objects. A similar
problem happens with showing that the category whose object type and arrow
type are unit is the terminal object of Cat. It is not clear to the authors
wether this is intensional or the result of a bug. In any case, we have
elected to go around this problem by postulating existence of a universe
polymorphic type that has a single inhabitant:

#+begin_src coq
Parameter UNIT : Type.
Parameter TT : UNIT.

Axiom UNIT_SINGLETON : forall x y : UNIT, x = y.
#+end_src
** CANCELED Define dependent and non-dependent products using records
#+begin_src coq
(** The product type, defined as a record to enjoy eta rule for records. *)
Record prod (A B : Type) := {fst : A; snd : B}.

Arguments fst {_ _ } _.
Arguments snd {_ _ } _.
Arguments Build_prod {_ _ } _ _.

Notation "( X , Y )" := (Build_prod X Y).
Notation "X * Y" := (prod X Y) : type_scope.
#+end_src coq
* Theory
** STARTED Monad Transformers
** TODO If the category C has pullbacks, we can compose spans
** TODO Pullback
** TODO Pushout
** DONE Equalizer
** DONE Coequalizer
** TODO Complete
** TODO Cocomplete
** TODO Subojects
** TODO Subcategories
Where each object/arrow of a category maps to some subobject, such as Obj ->
Type and Hom -> Prop.
** TODO Equivalence of categories
** DONE End
** DONE Coend
** DONE Cocone
** DONE Wedge
** DONE Cowedge
** Colimits
*** DONE As (left)right local kan extensions along the unique functor to the terminal category
*** TODO (Sum)product-(co)equalizer (co)limits
*** TODO Pointwise (as kan extensions)
** Kan extensions
*** DONE Global definition
*** TODO Local definition with both hom-functor and cones (along a functor)
*** TODO Uniqueness
*** TODO Preservation by adjoint functors
*** TODO Pointwise kan extensions (preserved by representable functors)
** Adjunctions
*** TODO Conversions of the different representations
**** TODO Hom-functor adjunction
**** DONE Unit-counit adjunction
**** TODO Universal morphism adjunction
*** TODO Duality : F ⊣ G ⇒ G^op ⊣ F^op
*** TODO Uniqueness up to natural isomorphism
** DONE Diagram
** DONE Cone
** DONE Limit
* Constructions
** TODO Free category
** DONE Product (C × D)
** DONE Comma category (F ↓ G)
** DONE Arrow category (C⃗)
** DONE Slice/Coslice (C/c)
* Structures
* Instances
** TODO Finite sets
** TODO 3
** TODO Mon
** TODO Graphs
** TODO Homogeneous relations in Prop
** TODO Constructive homogeneous crelations in Type (possible?)
** TODO Cones, the category of Cones
** DONE 0
** DONE 1
** DONE 2
** DONE Monoid
** DONE Ensembles (mathematical sets)
* Functors
** TODO Show that a product of traversable functors is traversable
*** TODO Show that a product of lax monoidal functors is lax monoidal
** TODO Applicative functors as symmetric closed monoidal functors
This avoids needing to use internal products as the monoidal structure.
** TODO Comma category functors
For each comma category there are forgetful functors from it.

    Domain functor, S ↓ T → A
        objects: ( α , β , f ) ↦ α
        morphisms: ( g , h ) ↦ g
    Codomain functor, S ↓ T → B
        objects: ( α , β , f ) ↦ β
        morphisms: ( g , h ) ↦ h
    Arrow functor, S ↓ T → C↓
        objects: ( α , β , f ) ↦ f
        morphisms: ( g , h ) ↦ ( S g , T h )

** TODO Representable functors
Wikipedia: "We can generalize the previous example to any category C. To every
pair X, Y of objects in C one can assign the set Hom(X, Y) of morphisms from X
to Y. This defines a functor to Set which is contravariant in the first
argument and covariant in the second, i.e. it is a functor Cop × C → Set. If
f : X1 → X2 and g : Y1 → Y2 are morphisms in C, then the group homomorphism
Hom(f, g) : Hom(X2, Y1) → Hom(X1, Y2) is given by φ ↦ g ∘ φ ∘ f.

"Functors like these are called representable functors. An important goal in
many settings is to determine whether a given functor is representable."
*** TODO Define representable functors using an existential for the representor
** TODO F-algebras
** TODO F-coalgebras
** TODO Internal hom
Some categories may possess a functor that behaves like a Hom functor, but
takes values in the category C itself, rather than Set. Such a functor is
referred to as the internal Hom functor, and is often written as

    [−  −] : C^op × C → C

to emphasize its product-like nature, or as

    ⇒ : C^op × C → C

to emphasize its functorial nature, or sometimes merely in lower-case:

    hom(−,−) : C^op × C → C

Categories that possess an internal Hom functor are referred to as closed
categories. The forgetful functor U : C → Set on such categories takes the
internal Hom functor to the external Hom functor. That is,

    U ∘ hom(−,−) ≃ Hom(−,−)

where ≃ denotes a natural isomorphism; the isomorphism is natural in both
sites. Alternately, one has that

    Hom(I ,hom(−,−)) ≃ Hom(−,−)

where I is the unit object of the closed category. For the case of a closed
monoidal category, this extends to the notion of currying, namely, that

    Hom(X, Y ⇒ Z) ≃ Hom(X ⊗ Y, Z)

where ⊗ is a bifunctor, the internal product functor defining a monoidal
category. The isomorphism is natural in both X and Z. In other words, in a
closed monoidal category, the internal hom functor is an adjoint functor to
the internal product functor. The object Y ⇒ Z is called the internal Hom.
When ⊗ is the Cartesian product ×, the object Y ⇒ Z is called the exponential
object, and is often written as Z^Y.

Internal Homs, when chained together, form a language, called the internal
language of the category. The most famous of these are simply typed lambda
calculus, which is the internal language of Cartesian closed categories, and
the linear type system, which is the internal language of closed symmetric
monoidal categories.
** DONE Faithful (inj)
** DONE Full (surj)
** DONE Fully Faithful (bi)
** DONE Diagonal (Δ F)
* Proofs
** TODO Prod ⊣ Diag ⊣ Coprod
** TODO Show that exp_prod, prod_coprod and exp_coprod arise from adjunctions
Some of these involve the diagonal functor.
** TODO Awodey
*** TODO Theorem 1.6
Every category C with a set of arrows is isomorphic to one in which the
objects are sets and the arrows are functions.
*** TODO Exercise 1.13
Use the Cayley representation to show that every small category is isomorphic
to a “concrete” one, that is, one in which the objects are sets and the arrows
are functions between them.
*** TODO Exercise 1.14
The notion of a category can also be defined with just one sort (arrows)
rather than two (arrows and objects); the domains and codomains are taken to
be certain arrows that act as units under composition, which is partially
defined. Read about this definition in section I.1 of Mac Lane’s Categories
for the Working Mathematician, and do the exercise mentioned there, showing
that it is equivalent to the usual definition.
** TODO "Coyoneda lemma" states that every presheaf is a colimit of representables
** TODO Small preorders are complete
#+begin_src coq
Theorem Complete_Preorder (C : Category) (CC : Complete C) :
  forall x y: (ObjC), Hom x y’ ≃ (Arrow C → Hom x y)
#+end_src
** TODO Opposite of comma category: (F ↓ G) ≅ (G^op ↓ F^op)
** TODO Whenever F ≅ F' -> (F ↓ G) ≅ (F' ↓ G)
** TODO Functors produced from a natural isomorphism and its inverse are inverses
* TODO Type refinement
Comments from contextualMatters on /r/haskell:

With closed monoidal structure on presheaves, shouldn't it be possible to not
have to deal with point free style though ?

The term would look pretty much like haskell, but with a typing context to
account for the bindings (cf agda code in paper below).

It seems that in this work, Conal extracts from a haskell expression a "pure
categorical" term, in the form of an arrow between types existing in a single
context : the empty context. that is, closed terms. (Then he gains the freedom
to change the meaning of arrows to what he wants).

So he "steals" from haskell the surface language, but he does not "steal" the
binding structure, which is why you have to first remove the bindings. keeping
them means moving away from "type system as categories" and into "type system
as functor" :

In categories, this idea of a binding structure can be represented through
"pre sheaves", which associate to a context C the set of terms inhabiting a
type.

So there is a 2 level structure : above are all those "terms with context",
which is a category, and they can be projected onto a category of "contexts".
you can transport term above a context to terms above another by explicit
operations (corresponding in CS to weakening etc.. the point is those are
really of a different nature).

In the classical math literature, it's linked to the fibration approach. This
treatment for environments is one specific example.

That does not mean fibrations as a general concept is the panacea : they are
actually a very strong requirement, so there is some work to break them apart
in some weaker structure. ( fibrations like structures deal with many other
things (e.g. dependent types but not only)).

Atkey, McKinna etc use terms with environments and provide useful reference
here:

    A Scope Safe Universe of Syntaxes with Binding

Mellies and Zeilberger provide a categorical view for this:

    Isbell duality - (succinct presentation of presheaves)

    Functor are type refinement system
* Colophon
#+STARTUP: content fninline hidestars
#+OPTIONS: ^:{}
#+SEQ_TODO: STARTED TODO APPT WAITING(@) DELEGATED(@) DEFERRED(@) SOMEDAY(@) PROJECT | DONE(@) CANCELED(@) NOTE
#+TAGS: Call(c) Errand(e) Home(h) Net(n) Reply(r)
#+DRAWERS: PROPERTIES LOGBOOK OUTPUT SCRIPT SOURCE DATA
